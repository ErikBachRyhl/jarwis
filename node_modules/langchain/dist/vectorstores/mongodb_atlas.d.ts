import type { Collection, Document as MongoDBDocument } from "mongodb";
import { VectorStore } from "./base.js";
import { Embeddings } from "../embeddings/base.js";
import { Document } from "../document.js";
export type MongoDBAtlasVectorSearchLibArgs = {
    readonly collection: Collection<MongoDBDocument>;
    readonly indexName?: string;
    readonly textKey?: string;
    readonly embeddingKey?: string;
};
type MongoDBAtlasFilter = {
    preFilter?: MongoDBDocument;
    postFilterPipeline?: MongoDBDocument[];
} & MongoDBDocument;
export declare class MongoDBAtlasVectorSearch extends VectorStore {
    FilterType: MongoDBAtlasFilter;
    private readonly collection;
    private readonly indexName;
    private readonly textKey;
    private readonly embeddingKey;
    _vectorstoreType(): string;
    constructor(embeddings: Embeddings, args: MongoDBAtlasVectorSearchLibArgs);
    addVectors(vectors: number[][], documents: Document[]): Promise<void>;
    addDocuments(documents: Document[]): Promise<void>;
    similaritySearchVectorWithScore(query: number[], k: number, filter?: MongoDBAtlasFilter): Promise<[Document, number][]>;
    static fromTexts(texts: string[], metadatas: object[] | object, embeddings: Embeddings, dbConfig: MongoDBAtlasVectorSearchLibArgs): Promise<MongoDBAtlasVectorSearch>;
    static fromDocuments(docs: Document[], embeddings: Embeddings, dbConfig: MongoDBAtlasVectorSearchLibArgs): Promise<MongoDBAtlasVectorSearch>;
}
export {};
